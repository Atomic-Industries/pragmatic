#   Copyright (C) 2010 Imperial College London and others.
#   
#   Please see the AUTHORS file in the main source directory for a full list
#   of copyright holders.
#
#   Gerard Gorman
#   Applied Modelling and Computation Group
#   Department of Earth Science and Engineering
#   Imperial College London
#
#   amcgsoftware@imperial.ac.uk
#   
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation,
#   version 2.1 of the License.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#   USA

dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.in)
AC_CONFIG_HEADERS(include/config.h)

# Check system type
AC_CANONICAL_HOST

# Override autoconf defaults for CXXFLAGS before searching for compiler
CXXFLAGS="${CXXFLAGS:''}"
AC_PROG_CXX([icpc g++])

AC_LANG_PUSH([C++])

# autoconf sets GCC=yes for icc/icpc. Therefore we need an additional
# check to determine if this is the intel compiler.
AC_CHECK_DEFINED(__INTEL_COMPILER, [ICPC="yes"], [])

CPPFLAGS="${CPPFLAGS:''}"
AC_PROG_CPP

AC_OPENMP()
AC_SUBST(OPENMP_CXXFLAGS)

AC_PROG_INSTALL
AC_CHECK_PROG(AR, ar, ar, ,$PATH)
test -n "$ARFLAGS" || ARFLAGS="cr"
AC_PROG_RANLIB
AC_CHECK_PROG(MAKE, gmake, gmake, make, $PATH)

# Various GCC options
if test "$ac_compiler_gnu" = yes ; then
   CXXFLAGS="$CXXFLAGS -Wall -Wno-deprecated"
fi

AC_ARG_ENABLE(debugging,
    [AC_HELP_STRING([--enable-debugging],
	    [turns on debugging flags])])

AC_ARG_ENABLE(gprof,
    [AC_HELP_STRING([--enable-gprof],
	    [enables profiling with gprof])])

if test "x$ICPC" = "xyes" ; then
    if test "$enable_debugging" = "yes" ; then
        CXXFLAGS="-g -O0 $CXXFLAGS"
        LDFLAGS="-g $LDFLAGS"
    elif test "$enable_gprof" = "yes" ; then
        CXXFLAGS="-p -g -O2 $CXXFLAGS"
        LDFLAGS="-p -g $LDFLAGS"
    else
        CXXFLAGS="-O2 $CXXFLAGS"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
    fi
elif test "x$GCC" = "xyes" ; then
    if test "$enable_debugging" = "yes" ; then
        CXXFLAGS="-g -O0 $CXXFLAGS"
        LDFLAGS="-g $LDFLAGS"
    elif test "$enable_gprof" = "yes" ; then
        CXXFLAGS="-pg -g -O2 $CXXFLAGS"
        LDFLAGS="-pg -g $LDFLAGS"
    else
        CXXFLAGS="-O3 -fexpensive-optimizations $CXXFLAGS"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
    fi
fi

AC_CHECK_LIB(stdc++,main,,) 
AC_CHECK_LIB(m,main,,)
AC_CHECK_LIB(numa,main,,AC_MSG_WARN([No NUMA support available.]))
AC_CHECK_LIB(metis,main,,AC_MSG_ERROR([METIS required]))

# Zoltan
AC_ARG_ENABLE(zoltan,[AC_HELP_STRING([--enable-zoltan], [Enables Zoltan support])])
if test "x$enable_zoltan" = "xyes"; then
    ACX_zoltan([AC_MSG_NOTICE(["Zoltan found"])], [AC_MSG_WARN(["Zoltan not found"])])
fi

vtk_header_relative_path=""
AC_ARG_ENABLE(vtk,[AC_HELP_STRING([--enable-vtk], [Only use to disable vtk])])
if test "$enable_vtk" != "no" ; then
    AC_MSG_NOTICE([Checking for VTK automagic.])
    AC_LINK_IFELSE(
	[AC_LANG_PROGRAM([[
#include <vtkVersion.h>
#include <vtkUnstructuredGrid.h>
                        ]],
		[[
                        vtkVersion::GetVTKMajorVersion();
                        vtkUnstructuredGrid *ug=vtkUnstructuredGrid::New();
                        ]])
            ],
	[
            AC_MSG_NOTICE([VTK automagic works.])
	    CPPFLAGS="$CPPFLAGS -DHAVE_VTK"
            VTK=yes
            search_for_vtk=no
            ],
	[
            AC_MSG_NOTICE([No VTK automagic])
	    search_for_vtk=yes	    
	])
    
    if test "x$search_for_vtk" == "xyes" ; then
        # Usually the location of the libraries is not a mystery. The
        # header files are another matter.
        AC_CHECK_LIB(dl, main)
        AC_CHECK_LIB(vtksys, main)
        AC_CHECK_LIB(vtkCommon, main, [], 
            [if test "x$VTK_LIBS" != "x" ; then
                LIBS="$LIBS -L$VTK_LIBS"
                unset ac_cv_lib_vtkCommon_main
                AC_CHECK_LIB(vtkCommon, main, [], 
                   [
                      AC_MSG_ERROR([Cannot find vtk installation.])
                      exit -1
                   ])
             else
                AC_MSG_ERROR([Cannot find vtk installation.])
                exit -1
             fi
            ])
        AC_CHECK_LIB(vtkzlib, main)
        AC_CHECK_LIB(vtkexpat, main)
        AC_CHECK_LIB(vtkFiltering, main)
        AC_CHECK_LIB(vtkGraphics, main)
        AC_CHECK_LIB(vtkIO, main)
        
        # check at the usual places:
        for i in $(ls -d /usr/include/vtk*) $VTK_INCLUDE; do
            if test -r $i/vtkCellData.h; then
                CPPFLAGS="-I$i $CPPFLAGS"
            fi
        done
        AC_CHECK_HEADER(vtkCellData.h,
            [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                VTK=yes
                ],
            [AC_CHECK_HEADER(vtk-5.0/vtkCellData.h,
                    [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                        VTK=yes
                        vtk_header_relative_path="vtk-5.0/"
                        ],
                    [       
                        AC_MSG_ERROR([Cannot find vtk installation.])
                        exit -1
                    ])
          ])
    fi
fi
cat > include/vtk.h <<EOF
#ifndef VTK_H
#define VTK_H

#ifdef HAVE_VTK
#include <${vtk_header_relative_path}vtkBMPWriter.h>
#include <${vtk_header_relative_path}vtkCellData.h>
#include <${vtk_header_relative_path}vtkCellDataToPointData.h>
#include <${vtk_header_relative_path}vtkCellDerivatives.h>
#include <${vtk_header_relative_path}vtkCell.h>
#include <${vtk_header_relative_path}vtkCellType.h>
#include <${vtk_header_relative_path}vtkClipDataSet.h>
#include <${vtk_header_relative_path}vtkContourGrid.h>
#include <${vtk_header_relative_path}vtkDataArray.h>
#include <${vtk_header_relative_path}vtkDataObject.h>
#include <${vtk_header_relative_path}vtkDataSet.h>
#include <${vtk_header_relative_path}vtkDataSetReader.h>
#include <${vtk_header_relative_path}vtkDoubleArray.h>
#include <${vtk_header_relative_path}vtkFloatArray.h>
#include <${vtk_header_relative_path}vtkGenericCell.h>
#include <${vtk_header_relative_path}vtkHexahedron.h>
#include <${vtk_header_relative_path}vtkIdList.h>
#include <${vtk_header_relative_path}vtkImageData.h>
#include <${vtk_header_relative_path}vtkIntArray.h>
#include <${vtk_header_relative_path}vtkPointData.h>
#include <${vtk_header_relative_path}vtkPointLocator.h>
#include <${vtk_header_relative_path}vtkPolyData.h>
#include <${vtk_header_relative_path}vtkShortArray.h>
#include <${vtk_header_relative_path}vtkStructuredGrid.h>
#include <${vtk_header_relative_path}vtkTetra.h>
#include <${vtk_header_relative_path}vtkUnsignedCharArray.h>
#include <${vtk_header_relative_path}vtkUnsignedIntArray.h>
#include <${vtk_header_relative_path}vtkUnstructuredGrid.h>
#include <${vtk_header_relative_path}vtkUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLImageDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPolyDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLStructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkZLibDataCompressor.h>

#ifndef vtkFloatingPointType
#define vtkFloatingPointType vtkFloatingPointType
typedef float vtkFloatingPointType;
#endif

#endif
#endif
EOF

AC_CHECK_HEADER(vtkCellData.h,[],
[AC_MSG_ERROR([Cannot find vtk instillation.])])

AC_SUBST(ARFLAGS)
AC_C_CONST
AC_C_INLINE

AC_OUTPUT(Makefile
	  tests/Makefile)

VERSION=`svnversion .`
AC_SUBST(VERSION)
cat >> confdefs.h << EOF
#undef __PRAGMATIC_VERSION__
#define __PRAGMATIC_VERSION__ "$VERSION"
EOF

cat confdefs.h | grep "^#[dua][enl][fdl][ieo][nfw]" > include/confdefs.h
