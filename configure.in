#   Copyright (C) 2010 Imperial College London and others.
#   
#   Please see the AUTHORS file in the main source directory for a full list
#   of copyright holders.
#
#   Gerard Gorman
#   Applied Modelling and Computation Group
#   Department of Earth Science and Engineering
#   Imperial College London
#
#   amcgsoftware@imperial.ac.uk
#   
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation,
#   version 2.1 of the License.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#   USA

dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.in)

# Check system type
AC_CANONICAL_HOST

AC_LANG_PUSH([C++])

# Override autoconf defaults for ...FLAGS before searching for compiler
FCFLAGS="${FCFLAGS:''}"
CXXFLAGS="${CXXFLAGS:''}"
CFLAGS="${CFLAGS:''}"

if test -z "$FC" && test -n "$MPIFC"; then
    FC="$MPIFC"
fi

if test -z "$CXX" && test -n "$MPICXX"; then
    CXX="$MPICXX"
fi

if test -z "$CC" && test -n "$MPICC"; then
    CC="$MPICC"
fi

AC_PROG_CXX([icpc FCC g++])
LX_FIND_MPI
# AX_MPI
CXX="$MPICXX"
LIBS="$LIBS $MPI_CXXLDFLAGS"

AC_LANG_PUSH([C])
AC_PROG_FC([icc fc gcc])
AX_MPI
CC="$MPICC"
LIBS="$MPILIBS $LIBS"
AC_LANG_POP()

AC_LANG_PUSH([Fortran])
AC_PROG_FC([ifort frt gfortran])
AX_MPI
FC="$MPIFC"
LIBS="$MPILIBS $LIBS"
AC_LANG_POP()

# autoconf sets GCC=yes for icc/icpc. Therefore we need an additional
# check to determine if this is the intel compiler.
AC_CHECK_DEFINED(__INTEL_COMPILER, [ICPC="yes"], [])

# Check for Fujitsu compiler
AC_CHECK_DEFINED(__FCC_VERSION, [FCC="yes"], [])

CPPFLAGS="${CPPFLAGS:''}"
AC_PROG_CPP

AC_OPENMP()

AC_LANG_PUSH([C])
AC_OPENMP()
AC_LANG_POP()

AC_LANG_PUSH([Fortran])
AC_OPENMP()
AC_LANG_POP()

AC_SUBST(OPENMP_CXXFLAGS)

AC_PROG_INSTALL
AC_CHECK_PROG(AR, ar, ar, ,$PATH)
test -n "$ARFLAGS" || ARFLAGS="cr"
AC_PROG_RANLIB
AC_CHECK_PROG(MAKE, gmake, gmake, make, $PATH)

AC_ARG_ENABLE(fortran,
    [AC_HELP_STRING([--enable-fortran],
	    [enable Fortran interface (default)])])
USING_FORTRAN="yes"
if test "x$enable_fortran" = "xno" ; then
   USING_FORTRAN="no"
fi
AC_SUBST(USING_FORTRAN)

AC_ARG_ENABLE(debugging,
    [AC_HELP_STRING([--enable-debugging],
	    [turns on debugging flags])])

if test "x$ICPC" = "xyes" ; then
    if test "$enable_debugging" = "yes" ; then
        CXXFLAGS="-g -O0 -Wall $CXXFLAGS"
        CFLAGS="-g -O0 -Wall $CFLAGS"
        FCFLAGS="-g -O0 -Wall $FCFLAGS"
        LDFLAGS="-g $LDFLAGS"
    else
        CXXFLAGS="-O2 $CXXFLAGS -diag-disable all -w -vec-report0 -openmp-report0"
        CFLAGS="-O2 $CFLAGS -diag-disable all -w -vec-report0 -openmp-report0"
        FCFLAGS="-O2 $FCFLAGS -diag-disable all -w -vec-report0 -openmp-report0"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
    fi
elif test "x$FCC" = "xyes" ; then
    CXXFLAGS="$CXXFLAGS -w"
    CFLAGS="$CFLAGS -w"
    FCFLAGS="$FCFLAGS -w"
    if test "$enable_debugging" = "yes" ; then
        CXXFLAGS="-g -O0 $CXXFLAGS"
        CFLAGS="-g -O0 $CFLAGS"
        FCFLAGS="-g -O0 $FCFLAGS"
        LDFLAGS="-g $LDFLAGS"
    else
        CXXFLAGS="-O3 $CXXFLAGS"
        CFLAGS="-O3 $CFLAGS"
        FCFLAGS="-O3 $FCFLAGS"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
    fi
elif test "x$GCC" = "xyes" ; then
    CXXFLAGS="$CXXFLAGS -Wall -Wno-deprecated -frounding-math"
    if test "$enable_debugging" = "yes" ; then
        CXXFLAGS="-g -O0 $CXXFLAGS"
        CFLAGS="-g -O0 $CFLAGS"
        FCFLAGS="-g -O0 $FCFLAGS"
        LDFLAGS="-g $LDFLAGS"
    else
        CXXFLAGS="-O3 -fexpensive-optimizations $CXXFLAGS"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
    fi
fi

AC_CHECK_LIB(stdc++,fclose,,) 
AC_CHECK_LIB(m,sin,,)
AC_CHECK_LIB(numa,numa_alloc,,AC_MSG_WARN([No NUMA support available.]))

ACX_zoltan([AC_MSG_NOTICE(["Zoltan found"])], [AC_MSG_WARN(["Zoltan not found"])])

AC_CHECK_LIB(gmp, __gmpz_init, [GMP="yes"], [])

AC_ARG_WITH([cgal],
    [AC_HELP_STRING([--with-cgal],
	    [Prefix where CGAL is installed.])],
            [cgal="$withval"], [])
if test -n "$cgal" ; then
  CPPFLAGS="$CPPFLAGS -I$cgal/include"
  LIBS="$LIBS -L$cgal/lib"
fi

AC_MSG_CHECKING([for libCGAL])
old_libs="$LIBS"
if test "x$GMP" = "xyes" ; then
    LIBS="-lCGAL -lgmp $LIBS"
else
    LIBS="-lCGAL $LIBS"
fi
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include <iostream>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/convex_hull_2.h>

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef K::Point_2 Point_2;
                    ]],
            [[
  Point_2 points[5] = { Point_2(0,0), Point_2(10,0), Point_2(10,10), Point_2(6,5), Point_2(4,1) };
  Point_2 result[5];

  CGAL::convex_hull_2( points, points+5, result );
                    ]])
        ],
        [AC_DEFINE([HAVE_LIBCGAL])
         AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

# Detect VTK
AC_CHECK_LIB(dl, dlopen)

if test -n "$VTK_LIBS" ; then
    LIBS="$LIBS -L$VTK_LIBS"
fi
for i in $VTK_INCLUDE $(ls -d /usr/include/vtk*); do
    if test -r $i/vtkCellData.h; then
        CPPFLAGS="-I$i $CPPFLAGS"
    fi
done

AC_CHECK_HEADER(vtkVersion.h,
    [AC_DEFINE([HAVE_VTK])])

AC_MSG_CHECKING([for libvtksys])
old_libs="$LIBS"
LIBS="-lvtksys $LIBS"
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include "vtksys/Directory.hxx"
                    ]],
            [[      
                    vtksys::Directory dir;
                    ]])
        ],
    [AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for libvtkCommon])
old_libs="$LIBS"
LIBS="-lvtkCommon $LIBS"
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include <vtkQuadric.h>
                    ]],
            [[
                    vtkQuadric *q=vtkQuadric::New();
                    ]])
        ],
    [AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for libvtkFiltering])
old_libs="$LIBS"

LIBS="-lvtkFiltering $LIBS"
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include <vtkVersion.h>
#include <vtkUnstructuredGrid.h>
                    ]],
            [[
                    vtkVersion::GetVTKMajorVersion();
                    vtkUnstructuredGrid *ug=vtkUnstructuredGrid::New();
                    ]])
        ],
    [AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for libvtkGraphics])
old_libs="$LIBS"
LIBS="-lvtkGraphics $LIBS"
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include <vtkCellDataToPointData.h>
                    ]],
            [[
                    vtkCellDataToPointData *c=vtkCellDataToPointData::New();
                    ]])
        ],
    [AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

AC_CHECK_LIB(vtkzlib, vtk_zlib_gzopen,,)
AC_CHECK_LIB(vtkexpat, vtk_expat_XML_ExpatVersion)

AC_MSG_CHECKING([for libvtkIO])
old_libs="$LIBS"
LIBS="-lvtkIO $LIBS"
AC_LINK_IFELSE([
        AC_LANG_PROGRAM(
            [[
#include <vtkXMLUnstructuredGridWriter.h>
                    ]],
            [[
                    vtkXMLUnstructuredGridWriter *c=vtkXMLUnstructuredGridWriter::New();
                    ]])
        ],
    [AC_MSG_RESULT([yes])],
    [LIBS="$old_libs" ; AC_MSG_RESULT([no])])

# CUDA support
############################################
# NVIDIA Cuda Compiler detection and setup #
############################################
AC_ARG_ENABLE(cuda, 
        AS_HELP_STRING([--enable-cuda=ARCH], [Enable cuda based modules for architecture ARCH (see nvcc option -arch).]),[

        # Search nvcc compiler
        AC_PATH_PROG(NVCC, nvcc, "no")
        AS_IF([test "x$NVCC" = "xno"],[
                        AC_MSG_ERROR([NVCC compiler not found!])
        ])

        # Check nvcc version, should be 4.x
        AS_IF([nvcc --version | grep -q "release 4"],
                        [],
                        [AC_MSG_WARN([NVCC compiler version is NOT 3.0!])
        ])

        # If $with_cuda is not empty, set to CUDA_ARCH to
        # supplied value, else set to value sm_11
        AS_IF([test "x$enableval" = "xyes"],[
                        CUDA_ARCH=" -arch=sm_11"
        ],[
                CUDA_ARCH=" -arch=$enableval"
        ])

                # Set CUDA_CFLAGS to $NVCC, where substring "bin/nvcc"
                # is substituted by "include".
                CUDA_CFLAGS=" -I${NVCC/'bin/nvcc'/include}"

                #Set CUDA_CFLAGS to $NVCC, where substring "bin/nvcc"
                #is substituted by "lib".
                CUDA_LIBS=" -L${NVCC/'bin/nvcc'/lib}"

                # If $build_cpu contains "_64", append "64" to CUDA_LIBS
        AS_IF([echo $build_cpu | grep -q "_64"],
                [CUDA_LIBS+="64"])

                # Append " -lcudart" to CUDA_LIBS
                CUDA_LIBS+=" -lcudart"

        # Symbolize that cuda is wanted
        with_cuda=$enableval

        # Make variables available in Makefile.am
        AC_SUBST(CUDA_CFLAGS)
        AC_SUBST(CUDA_LIBS)
        AC_SUBST(NVCC)
])
# Set this conditional if cuda is wanted
if test -n "$with_cuda" ; then
    ENABLE_CUDA=yes
    AC_SUBST(ENABLE_CUDA)
fi

# Set up compilation flags for cuda compiler nvcc, if with_cuda is set
AS_IF([test -n "$with_cuda"],[

        # If debug flag is set apply debugging compilation flags, otherwise build compilation flags
        AS_IF([test "x$DEBUG" = "xtrue"],
                [NVCCFLAGS="-g --compiler-options -fno-strict-aliasing --compiler-options -fno-inline"],
                [NVCCFLAGS="-O3 -use_fast_math --compiler-options -fno-strict-aliasing --compiler-options -fno-inline"])

        # Add architecture to flags
        NVCCFLAGS+=" $CUDA_ARCH"

        # If device emulation was set, add deviceemu flag
        AS_IF([test "x$EMULATION" = "xtrue"],
                [NVCCFLAGS+=" -deviceemu"])

])
# Make NVCCFLAGS available in Makefile.am
AC_SUBST(NVCCFLAGS)

AC_SUBST(ARFLAGS)
AC_C_CONST
AC_C_INLINE

AC_OUTPUT(Makefile
    src/Makefile
    tests/Makefile)
cat > include/pragmatic_config.h << EOF
#ifndef PRAGMATIC_CONFIG_H
#define PRAGMATIC_CONFIG_H
EOF
cat confdefs.h | grep "^#[dua][enl][fdl][ieo][nfw]" >> include/pragmatic_config.h
cat >> include/pragmatic_config.h << EOF
#endif
EOF
