SHELL = /bin/bash

CXX = @CXX@
CXXFLAGS = @CXXFLAGS@ @OPENMP_CXXFLAGS@

FC = @FC@
FCFLAGS = @FCFLAGS@ @OPENMP_FCFLAGS@

CPPFLAGS = @CPPFLAGS@ @CPPFLAGS_ZOLTAN@ -I../include -I./include -DTIXML_USE_STL
LDFLAGS = @LDFLAGS@

NVCC = @NVCC@
NVCCFLAGS = @CUDA_CFLAGS@ @NVCCFLAGS@

objs = ticker.o tinystr.o tinyxml.o tinyxmlerror.o tinyxmlparser.o

CUDA_LIBS = $(objs) @CUDA_LIBS@
LIBS = $(objs) @LIBS_ZOLTAN@ @LIBS@

LIB = ../lib/libpragmatic.a

ifeq (@USING_FORTRAN@,yes)
TEST_SRC_F90 = $(wildcard src/ftest_*.F90)
TEST_BIN_F90 = $(patsubst src/%.F90,bin/%,$(TEST_SRC_F90))
endif

ifeq (@ENABLE_CUDA@,yes)
TEST_SRC_CUDA = $(wildcard src/test_*.cu)
TEST_BIN_CUDA = $(patsubst src/%.cu,bin/%,$(TEST_SRC_CUDA))
endif

TEST_SRC_CXX = $(filter-out $(wildcard src/*cuda.cpp), $(wildcard src/test_*.cpp))
TEST_BIN_CXX = $(patsubst src/%.cpp,bin/%,$(TEST_SRC_CXX))

TEST_SRC = $(TEST_SRC_CXX) $(TEST_SRC_F90) $(TEST_SRC_CUDA)
TEST_BIN = $(TEST_BIN_CXX) $(TEST_BIN_F90) $(TEST_BIN_CUDA)

VPATH = ./:./src

.SUFFIXES: .cpp .F90 .o

.cpp.o:
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<
.F90.o:
	@$(FC) $(CPPFLAGS) $(FCFLAGS) -c $<
.cu.o:
	@$(NVCC) $(NVCCFLAGS) -c $<

default: test

test: binaries
	@cp src/*.mpi bin/
	python ./unittest bin

binaries: $(TEST_BIN)

bin/%: src/%.cpp $(objs) 
	@echo "    CXX $@"
	@$(CXX) $(LDFLAGS) $(CPPFLAGS) $(CXXFLAGS) -o $@ $< $(LIB) $(LIBS)

bin/%: src/%.F90 $(objs) 
	@echo "    FC $@"
	@$(FC) $(LDFLAGS) $(CPPFLAGS) $(FCFLAGS) -o $@ $< $(LIB) $(LIBS)

bin/%: src/%.cu
	@echo "    NVCC $@"
	@$(NVCC) $(NVCCFLAGS) -o $@ $< $(CUDA_LIBS)

clean:
	rm -rf *.o $(TEST_BIN) bin/test* bin/benchmark*
